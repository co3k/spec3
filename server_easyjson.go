// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package spec3

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson22b57fa5DecodeGithubComGoOpenapiSpec3(in *jlexer.Lexer, out *ServerVariables) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComGoOpenapiSpec3(out *jwriter.Writer, in ServerVariables) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerVariables) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComGoOpenapiSpec3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerVariables) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComGoOpenapiSpec3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerVariables) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComGoOpenapiSpec3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerVariables) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComGoOpenapiSpec3(l, v)
}
func easyjson22b57fa5DecodeGithubComGoOpenapiSpec31(in *jlexer.Lexer, out *ServerVariable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enum":
			if in.IsNull() {
				in.Skip()
				out.Enum = nil
			} else {
				in.Delim('[')
				if out.Enum == nil {
					if !in.IsDelim(']') {
						out.Enum = make([]string, 0, 4)
					} else {
						out.Enum = []string{}
					}
				} else {
					out.Enum = (out.Enum)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Enum = append(out.Enum, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default":
			out.Default = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "extensions":
			(out.Extensions).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComGoOpenapiSpec31(out *jwriter.Writer, in ServerVariable) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Enum) != 0 {
		const prefix string = ",\"enum\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Enum {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if in.Default != "" {
		const prefix string = ",\"default\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Default))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if true {
		const prefix string = ",\"extensions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Extensions).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerVariable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComGoOpenapiSpec31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerVariable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComGoOpenapiSpec31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerVariable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComGoOpenapiSpec31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerVariable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComGoOpenapiSpec31(l, v)
}
func easyjson22b57fa5DecodeGithubComGoOpenapiSpec32(in *jlexer.Lexer, out *Server) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "variables":
			(out.Variables).UnmarshalEasyJSON(in)
		case "extensions":
			(out.Extensions).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComGoOpenapiSpec32(out *jwriter.Writer, in Server) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if true {
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Variables).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"extensions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Extensions).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Server) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComGoOpenapiSpec32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Server) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComGoOpenapiSpec32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Server) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComGoOpenapiSpec32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Server) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComGoOpenapiSpec32(l, v)
}
